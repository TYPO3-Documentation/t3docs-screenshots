#!/bin/bash

## Description: Make screenshots via codeception inside the web container
## Usage: make-screenshots
## Example: make-screenshots\nmake-screenshots -s Styleguide\nmake-screenshots -s Styleguide -a actionsIdentifierScreenshots\nmake-screenshots -t TYPO3CMS-Reference-TCA
## Flags: [{"Name":"actions-id","Shorthand":"a","Type":"string","Usage":"Run actions of specific ID only. Actions of all IDs if empty."},{"Name":"suite-id","Shorthand":"s","Type":"string","Usage":"Run actions of specific TYPO3 environment suite ID only (Core, Examples, ExtensionBuilder, Install, Introduction, SitePackage, Styleguide). All suites if empty."},{"Name":"target-path","Shorthand":"t","Type":"string","Usage":"Run actions of specific folder and its subfolders only (relative or absolute path). All folders if empty."}]

SUITE_ID=""
TARGET_PATH=""
ACTIONS_ID=""

fetch_options() {
    local params;
    local exitStatus;

    params=$(getopt --options s:a:t: --longoptions suite-id:,actions-id:,target-path: --name "$0" -- "$@")

    exitStatus=$?
    if [ $exitStatus -eq 0 ]; then
        eval set -- "$params"

        while true
        do
            case "$1" in
                -s|--suite-id)
                    SUITE_ID=$2
                    shift 2
                    ;;
                -a|--actions-id)
                    ACTIONS_ID=$2
                    shift 2
                    ;;
                -t|--target-path)
                    TARGET_PATH=$2
                    shift 2
                    ;;
                --)
                    shift
                    ;;
                "")
                    break
                    ;;
                *)
                    echo "Invalid argument: '$1'" >&2
                    exitStatus=1
                    shift
                    ;;
            esac
        done
    fi

    if [ $exitStatus -ne 0 ]; then
        echo "Call \"make-screenshots --help\" to display help and valid options."
        exit $exitStatus
    fi
}

cleanup_screenshots() {
    typo3 screenshots:cleanup
}

make_screenshots() {
    screenshotsPathFilter=$TARGET_PATH \
    screenshotsActionsIdFilter=$ACTIONS_ID \
    typo3InstallMysqlDatabaseName=screenshots_install \
    typo3InstallMysqlDatabaseUsername=root \
    typo3InstallMysqlDatabasePassword=root \
    typo3InstallMysqlDatabaseHost=db \
    typo3DatabaseName=screenshots_backend \
    typo3DatabaseUsername=root \
    typo3DatabasePassword=root \
    typo3DatabaseHost=db \
    /var/www/html/vendor/bin/codecept run -d -c /var/www/html/public/typo3conf/ext/screenshots/Classes/Runner/codeception.yml $SUITE_ID
}

fetch_suites() {
    local suites;
    local exitStatus;

    suites=$(typo3 screenshots:fetchsuites --target-path=$TARGET_PATH --suite-id=$SUITE_ID --actions-id=$ACTIONS_ID)
    exitStatus=$?

    echo $suites
    exit $exitStatus
}

run_suites() {
    local suites;
    local exitStatus;

    suites=$(fetch_suites)
    exitStatus=$?

    if [ "$exitStatus" -eq 0 ]; then
        if [ "$suites" != "[]" ]; then
            while read suite; do
                path=$(jq -r '.path' <<< "$suite")
                suiteId=$(jq -r '.suiteId' <<< "$suite")

                TARGET_PATH="$path" SUITE_ID="$suiteId" make_screenshots
            done <<< $(jq -c '.[]' <<< "$suites")
        fi
    else
        echo $suites
    fi
}

fetch_options $@
cleanup_screenshots
run_suites
